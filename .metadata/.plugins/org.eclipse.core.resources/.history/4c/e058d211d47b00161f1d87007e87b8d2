package Ex7_2;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import Ex7_1.Contact;

public class MainManageEmployee {
	static BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
	static int idDep;
	static String nameDep;
	static String nameEmp;
	static int idEmp;
	static int sexEmp;
	static String birthday;
	static double salary;
	static String address;
	public static void main(String[] args) {
		try {
			int ans;
			do {
				while (true) {
					System.out.println("1. Add Department");
					System.out.println("2. Add Employee");
					System.out.println("3. Show information of employee drug Department");
					System.out.println("4. Exit");
					ans = Integer.parseInt(input.readLine());
					if (ans >= 1 && ans <= 4 )
						break;
				}
				ManageEmployee list = new ManageEmployee();
				Employee emp;
				Department dep;
				switch (ans) {
				case 1:
					// Add Department
					System.out.println("Enter id: ");
					idDep = Integer.parseInt(input.readLine());
					System.out.println("Enter name: ");
					nameDep = input.readLine();
					dep = new Department(idDep, nameDep);
					list.addDep(dep);
					break;
				case 2:
					// Add Employee
					while (true) {
						int count = list.showInfoDep();
						idDep = Integer.parseInt(input.readLine());
						if (idDep >= 1 && idDep <= count)
							break;
					}
					System.out.println("Enter id: ");
					idEmp = Integer.parseInt(input.readLine());
					System.out.println("Enter name: ");
					nameEmp = input.readLine();
					while (true){
						System.out.println("Enter sex: " + "\n\t1.Male" + "\n\t2.Female" + "\nChoose: ");
						sexEmp = Integer.parseInt(input.readLine());
						if (sexEmp == 1 || sexEmp == 2)
							break;
					}					
					System.out.println("Enter birthday: ");
					birthday = input.readLine();
					System.out.println("Enter address: ");
					address = input.readLine();
					System.out.println("Enter salary: ");
					salary = Double.parseDouble(input.readLine());
					emp = new Employee(idEmp, nameEmp, sexEmp, birthday, salary, address, idDep);
					list.addEmp(emp);
					break;
				case 3:
					// Show information of employee drug Department
					list.showInfoEmp();
					break;
				case 4:
					// create and write into department.xml file
					writeDepartmentFile(list);
					// create and write into employee.xml file
					writeEmployeeFile(list);
					break;
				}
			} while (ans != 4);
		} catch (NumberFormatException | IOException e) {
			System.err.println(e.getMessage());
		}
	}
	private static void writeEmployeeFile(ManageEmployee list) {
		// existing file
		Path path = Paths.get("src/Ex7_2/employee.xml");
		if(!Files.exists(path)){
			File files = new File("src/Ex7_2/employee.xml");
		}
		try {
			DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
			
			// root elements
			Document doc = docBuilder.newDocument();
			Element rootElement = doc.createElement("Department");
			doc.appendChild(rootElement);
			
			List<Employee> listEmps = list.listEmp;
			
			for (int i = 0; i < listEmps.size(); i++) {
				Employee emp = listEmps.get(i);
				// department
				Element employee = doc.createElement("employee");
				rootElement.appendChild(employee);
				
				// id employee
				Element id = doc.createElement("id");
				id.appendChild(doc.createTextNode(String.valueOf(emp.getId())));
				employee.appendChild(id); 
				
				// name employee
				Element name = doc.createElement("name");
				name.appendChild(doc.createTextNode(emp.getName()));
				employee.appendChild(name);
				
				// sex employee
				Element sex = doc.createElement("sex");
				sex.appendChild(doc.createTextNode(String.valueOf(emp.getSex())));
				employee.appendChild(sex); 
				
				// birthday employee
				Element birthday = doc.createElement("birthday");
				birthday.appendChild(doc.createTextNode(emp.getBirthday()));
				employee.appendChild(birthday);
				
				// salary employee
				Element salary = doc.createElement("salary");
				salary.appendChild(doc.createTextNode(String.valueOf(emp.getSalary())));
				employee.appendChild(salary); 
				
				// address employee
				Element address = doc.createElement("address");
				address.appendChild(doc.createTextNode(emp.getAddress()));
				employee.appendChild(address);
			}	
			
			// write the content into xml file			
			TransformerFactory tranformer = TransformerFactory.newInstance();
			Transformer tf = tranformer.newTransformer();
			
			// structure xml file (down line)
			tf.setOutputProperty(OutputKeys.INDENT, "yes");
			tf.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
			
			DOMSource source = new DOMSource(doc);
			StreamResult result = new StreamResult(new File("src/Ex7_2/employee.xml"));
			tf.transform(source, result);			
		} catch (ParserConfigurationException | TransformerException e) {
			System.err.println(e.getMessage());
		}
	}
	private static void writeDepartmentFile(ManageEmployee getList) {
		// existing file
		Path path = Paths.get("src/Ex7_2/department.xml");
		if(!Files.exists(path)){
			File files = new File("src/Ex7_2/department.xml");
		}
		try {
			DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
			
			// root elements
			Document doc = docBuilder.newDocument();
			Element rootElement = doc.createElement("Company");
			doc.appendChild(rootElement);
			
			List<Department> listDeps = getList.listDep;
			
			for (int i = 0; i < listDeps.size(); i++) {
				Department dep = listDeps.get(i);
				// department
				Element department = doc.createElement("department");
				rootElement.appendChild(department);
				
				// id department
				Element id = doc.createElement("id");
				id.appendChild(doc.createTextNode(String.valueOf(dep.getId())));
				department.appendChild(id); 
				
				// name department
				Element name = doc.createElement("name");
				name.appendChild(doc.createTextNode(dep.getName()));
				department.appendChild(name);				
			}	
			
			// write the content into xml file			
			TransformerFactory tranformer = TransformerFactory.newInstance();
			Transformer tf = tranformer.newTransformer();
			
			// structure xml file (down line)
			tf.setOutputProperty(OutputKeys.INDENT, "yes");
			tf.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
			
			DOMSource source = new DOMSource(doc);
			StreamResult result = new StreamResult(new File("src/Ex7_2/department.xml"));
			tf.transform(source, result);			
		} catch (ParserConfigurationException | TransformerException e) {
			System.err.println(e.getMessage());
		}
	}
}
